<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 卫龙哥哥的小站</title>
    <link>https://alonwang.github.io/blog/posts/</link>
    <description>Recent content in Posts on 卫龙哥哥的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 04 Sep 2019 00:25:05 +0800</lastBuildDate>
    
	<atom:link href="https://alonwang.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>两个线程交替打印1-100的数字</title>
      <link>https://alonwang.github.io/blog/posts/multi-thread-printer/</link>
      <pubDate>Wed, 04 Sep 2019 00:25:05 +0800</pubDate>
      
      <guid>https://alonwang.github.io/blog/posts/multi-thread-printer/</guid>
      <description>分析&amp;amp;解决 一道经典的面试题,考察点是Java的notify/wait机制. 看过网上的一些解法,大同小异,不过很多都存在一个问题:输出完成后,会有一个线程由于wait后无法被唤醒导致程序一直阻塞</description>
    </item>
    
    <item>
      <title>Java Thread Spurious Wakeup</title>
      <link>https://alonwang.github.io/blog/posts/java-thread-spurious-wakeup/</link>
      <pubDate>Sun, 25 Aug 2019 12:29:51 +0800</pubDate>
      
      <guid>https://alonwang.github.io/blog/posts/java-thread-spurious-wakeup/</guid>
      <description>什么是线程虚假唤醒 在不同的语言，甚至不同的操作系统上，条件锁都会产生虚假唤醒现象。所有语言的条件锁库都推荐用户把wait()放进循环里,参见为什么条件锁会产生虚假唤醒现象（spurious wakeup</description>
    </item>
    
    <item>
      <title>小狗钱钱</title>
      <link>https://alonwang.github.io/blog/posts/xiao-gou-qian-qian/</link>
      <pubDate>Wed, 12 Jun 2019 22:22:37 +0800</pubDate>
      
      <guid>https://alonwang.github.io/blog/posts/xiao-gou-qian-qian/</guid>
      <description>最近看了一本理财类的儿童读物&amp;lt;小狗钱钱&amp;gt;,内容不多,读起来也很轻松,即使是对成年人,一些建议也很有用,推荐观看.有些内容,个人认为很有意义,简单记录一下. actions speak louder than words 决不能让好奇阻碍你做事，</description>
    </item>
    
  </channel>
</rss>